@using JoinedTogetherGmtk2021.Game





<CastleGrid Floor="@CurrentFloor"
            Descended="@(coord=>OnDescended(coord))"
            Ascended="@(coord=>OnAscended(coord))"
			WinCondition="@TestWinCondition"
            WinConditionReached="@(()=>OnWinConditionReached())"
            ResetRequested="@OnReset" @ref="_grid"
            EnableBackpack="@EnableBackpack"/>

<p style="margin-top: 30px;font-style: italic;">Stuck? Press 'R' at any time to restart.</p>

@inject IJSRuntime JSRuntime
@code
{
    CastleGrid _grid;

	[Parameter]
	public Func<Floor> FloorFactory { get; set; }

	[Parameter]
	public EventCallback WinConditionReached { get; set; }

	[Parameter]
	public Func<CastleScenario, bool> WinCondition { get; set; }

    [Parameter]
    public bool EnableBackpack { get; set; }

    private Floor CurrentFloor { get; set; }

    private bool TestWinCondition()
    {
        return WinCondition(this);
    }

    protected override void OnParametersSet()
    {
        if (WinCondition == null)
            WinCondition = scenario =>
            {
                var playerPositions = CurrentFloor.GameObjects.Where(x => x.IsPlayer).Select(x => x.Position);
                var exitPositions = CurrentFloor.GameObjects.Where(x => x.IsExit).Select(x => x.Position);
                var winConditions = playerPositions.Intersect(exitPositions);
                return winConditions.Any();
            };

		StartGame();

        base.OnParametersSet();
    }

    private void StartGame()
    {
        var floorTemplate = FloorFactory();
        this.CurrentFloor = floorTemplate;
    }

    private void OnReset()
    {
        _grid.ClearBackpack();
        StartGame();

        StateHasChanged();
    }

    private async Task OnWinConditionReached()
    {
        await JSRuntime.InvokeAsync<string>("PlayWinSound");
        await WinConditionReached.InvokeAsync();
    }

    private async Task OnAscended(FloorCoord descCood)
    {
        await JSRuntime.InvokeAsync<string>("PlayLadderSound"); 
		

        CurrentFloor = CurrentFloor.ParentFloor;
        StateHasChanged();
    }

    private async Task OnDescended(FloorCoord descCood)
    {
        await JSRuntime.InvokeAsync<string>("PlayLadderSound");

        var ladderPositions = CurrentFloor
            .Layout
            .Where(x => x.Value != null && x.Value.RoomType.HasLadderDesc)
            .Select(x => x.Key);

        var lowerFloor = FloorFactory();
		foreach (var ladderPosition in ladderPositions)
            lowerFloor.Layout[ladderPosition] = new Room(RoomTypes.PATH__S_);

        lowerFloor.GameObjects.Add(new GameObject{Position = descCood,IsPlayer = true});
        lowerFloor.ParentFloor = CurrentFloor;
        CurrentFloor = lowerFloor;
        StateHasChanged();
    }




}

